#!/usr/bin/env python

import rospy
from sensor_msgs.msg import JointState
from std_msgs.msg import Float64MultiArray
import tf
import numpy as np
from hard_coded_policy.traj_generator import TrapezoidVel, Poly3
from hard_coded_policy.transform_utils import mat_quatVel2angVel, getQuat, parseQuat, quat2mat

from ias_pykdl import KDLInterface
from hard_coded_policy.bezier_planner import BezierTrajectory

import matplotlib.pyplot as plt

def goto(goal, t_f = 3.0):
    q_0 = q_cur
    traj = Poly3(q_0, goal, 0, 0, t_f)
    msg = Float64MultiArray()
    for t in np.arange(0, t_f, rate.sleep_dur.to_sec()):
        msg.data = traj(t)[0]
        cmd_pubisher.publish(msg)
        rate.sleep()

def joint_state_cb(data):
    if data.name[0] == "F_joint_1":
        global q_cur
        q_cur = np.array(data.position)

if __name__ == '__main__':
    rospy.init_node("hit_static", anonymous=True)
    rate = rospy.Rate(100)

    tf_listener = tf.TransformListener()

    cmd_pubisher = rospy.Publisher("front_iiwa/joint_position_controller/command", Float64MultiArray, queue_size=1)
    vel_pubisher = rospy.Publisher("front_iiwa/joint_position_controller/velocity", Float64MultiArray, queue_size=1)
    rospy.Subscriber("joint_states", JointState, joint_state_cb)

    table_height = 0.28

    init_pos = np.array([0.45, 0.0, table_height])
    init_quat = getQuat([0, 1, 0], 180. / 180. * np.pi)

    # Define DoF, Joint-Limits and Gravity:
    n_dof = 7
    joint_pos_min = np.array([-2.96, -2.09, -2.96, -2.09, -2.96, -2.09, -2.96])
    joint_pos_max = np.array([+2.96, +2.09, +2.96, +2.09, +2.96, +2.09, +2.96])
    gravity = [+0., +0., -9.81]

    # Build kinematic chain for KDL kinematics:
    model_file = "/home/puze/ias_ros/src/iiwas_core/iiwas_description/robots/iiwas_new_frame.urdf"
    name_base_link = "F_link_0"
    name_end_effector = "F_link_ee"
    kdl_interface = KDLInterface(model_file, n_dof, name_base_link, name_end_effector, joint_pos_min, joint_pos_max,
                                 gravity)

    # Go to initial position
    while True:
        msg = rospy.wait_for_message("joint_states", JointState)
        if msg.name[0] == "F_joint_1":
            q_cur = np.array(msg.position)
            break
    init_pos = kdl_interface.inverse_kinematics(init_pos, init_quat, q_cur)
    print("Goto Initial Position: ", init_pos)
    goto(init_pos)

    # Paramters of Bezier Curve
    dim = 2
    lb = [0.36, -0.47]
    ub = [2.29, 0.47]
    bezier_planner = BezierTrajectory(dim, lb, ub)
    v_mag = 0.8
    goal_position = np.array([2.29, 0.0])

    while not rospy.is_shutdown():
        charac = raw_input("press Key to continue (r)eset/ (g)oto:\n")
        if charac =="g":
            puck_pose = tf_listener.lookupTransform("F_link_0", "Puck", rospy.Time(0))
            puck_position = np.array(puck_pose[0])

            ee_pose = tf_listener.lookupTransform("F_link_0", "F_link_ee", rospy.Time(0))
            ee_position = np.array(ee_pose[0])
            ee_quat = np.array(ee_pose[1])

            # calculate hitting velocity

            vf = (goal_position - puck_position[:2]) / np.linalg.norm(goal_position - puck_position[:2]) * v_mag
            bezier_planner.fit(ee_position[:2], puck_position[:2], vf)

            t = np.arange(0, bezier_planner.t_min, rate.sleep_dur.to_sec())
            command = []
            for t_i in t:
                traj_i = bezier_planner(t_i)[0]
                ee_pos_i = np.concatenate([traj_i, [table_height]])
                command.append(kdl_interface.inverse_kinematics(ee_pos_i, ee_quat, q_cur))

            cmd_msg = Float64MultiArray()
            vel_msg = Float64MultiArray()

            cmd_msg.data = command[0]
            while command.__len__() != 0:
                last_cmd = cmd_msg.data
                cmd_msg.data = command.pop(0)
                cmd_pubisher.publish(cmd_msg)

                vel_msg.data = (cmd_msg.data - last_cmd) / rate.sleep_dur.to_sec()
                vel_pubisher.publish(vel_msg)
                rate.sleep()

        elif charac == "r":
            goto(init_pos)
        else:
            continue