#!/usr/bin/env python

import rospy
from sensor_msgs.msg import JointState
from std_msgs.msg import Float64MultiArray
import tf
import numpy as np
from hard_coded_policy.traj_generator import TrapezoidVel, Poly3
from hard_coded_policy.transform_utils import mat_quatVel2angVel, getQuat, parseQuat, quat2mat

import tf2_kdl
import PyKDL
from ias_pykdl import KDLInterface

def goto(goal):
    q_0 = q_cur
    t_f = 5.0
    traj = Poly3(q_0, goal, 0, 0, t_f)
    msg = Float64MultiArray()
    for t in np.arange(0, t_f, 0.001):
        msg.data = traj(t)[0]
        cmd_pubisher.publish(msg)
        rate.sleep()


def joint_state_cb(data):
    if data.name[0] == "F_joint_1":
        global q_cur
        q_cur = np.array(data.position)

if __name__ == '__main__':
    rospy.init_node("goto_puck", anonymous=True)
    rate = rospy.Rate(1000)

    ls = tf.TransformListener()

    cmd_pubisher = rospy.Publisher("front_iiwa/joint_position_controller/command", Float64MultiArray, queue_size=10)
    rospy.Subscriber("joint_states", JointState, joint_state_cb)

    # ==========================================
    table_height = 0.4

    init_pos = np.array([0.45, 0.0, table_height])
    init_quat = getQuat([0, 1, 0], 180. / 180. * np.pi)

    # Define DoF, Joint-Limits and Gravity:
    n_dof = 7
    joint_pos_min = np.array([-2.96, -2.09, -2.96, -2.09, -2.96, -2.09, -2.96])
    joint_pos_max = np.array([+2.96, +2.09, +2.96, +2.09, +2.96, +2.09, +2.96])
    gravity = [+0., +0., -9.81]

    # Build kinematic chain for KDL kinematics:
    model_file = "/home/puze/ias_ros/src/iiwas_core/iiwas_description/robots/iiwas_new_frame.urdf"
    name_base_link = "F_link_0"
    name_end_effector = "F_link_ee"
    kdl_interface = KDLInterface(model_file, n_dof, name_base_link, name_end_effector, joint_pos_min, joint_pos_max,
                                 gravity)

    # Go to initial position
    while True:
        msg = rospy.wait_for_message("joint_states", JointState)
        if msg.name[0] == "F_joint_1":
            q_cur = np.array(msg.position)
            break

    init_pos = kdl_interface.inverse_kinematics(init_pos, init_quat, q_cur)
    print("Goto Initial Position: ", init_pos)
    goto(init_pos)

    cart_max_vel = np.array([2])
    cart_max_acc = np.array([5])

    while not rospy.is_shutdown():
        ## get puck position
        # rospy.loginfo("Reading puck position")

        charac = raw_input("press Key to continue (r)eset/ (g)oto:\n")
        if charac =="g":
            puck_pose = ls.lookupTransform("F_link_0", "Puck", rospy.Time(0))
            puck_dist = np.array(puck_pose[0])

            gripper_pose = ls.lookupTransform("F_link_0", "F_link_ee", rospy.Time(0))
            gripper_pos = np.array(gripper_pose[0])
            gripper_quat = np.array(gripper_pose[1])

            dist_norm = np.linalg.norm((puck_dist - gripper_pos)[:2])

            direction = puck_dist - gripper_pos[:3]
            direction[2] = 0.0
            direction = direction/np.linalg.norm(direction)

            traj = TrapezoidVel([0], dist_norm, cart_max_vel, cart_max_acc)

            t = np.arange(0, traj.t_f, 0.001)
            command = []
            for t_i in t:
                traj_i = traj(t_i)[0]
                ee_pos_i = gripper_pos + direction * traj_i
                ee_pos_i[2] = table_height
                command.append(kdl_interface.inverse_kinematics(ee_pos_i, gripper_quat, q_cur))

            msg = Float64MultiArray()
            while command.__len__() != 0:
                msg.data = command.pop(0)
                cmd_pubisher.publish(msg)
                rate.sleep()




        elif charac == "r":
            goto(init_pos)
        else:
            continue